# 클래스 만들고 사용하기
"""
클래스를 사용해 거의 모든 것을 모델화할 수 있따. 단순한 클래스 Dog로 시작하자.
Dog 클래스는 어떤 특정한 개가 아니라 그냥 개를 나타낸다. 애완견에 대해 아는 대로 나열
해보자. 애완견이니 이름과 나이를 안다. 대부분의 애완견은 앉고 구를 줄 압니다.
이 두가지 정보(이름과 나이), 두 가지 동작(앉기와 구르기)은 대부분 애완견의 공통
이므로 Dog클래스에 포함된다. 이 클래스는 파이썬에 개를 나타내는 객체를 어떻게
만들지 알린다. 클래스를 만들고 나면 이 클래스를 사용해 각각의 특정한 개를 나타내는
인스턴스를 만들것이다.
"""
# Dog 클래스 만들기
"""
Dog 클래의 각 인스터스에는 name과 age가 저장되고, 모든 개는 sit()과 roll_over()
동작을 할 수 있다.
"""
class Dog():
    """개를 모델화하는 시도"""

    def __init__(self, name, age):
        """name과 age 속성 초기화"""
        self.name = name
        self.age = age

    def sit(self):
        """명령에 따라 앉는 개"""
        print(self.name.title() + " is now sitting.")
    def roll_over(self):
        """명령에 따라 구르는 개"""
        print(self.name.title() + " rolled over!")
"""
첫번째 행에서 Dog클래스를 정의한다. 파이썬에서는 클래스 이름의 첫 글자를 대문자로
쓴다. 클래스 정의의 괄호가 비어 있는 이유는 이 클래스는 아무거도 없는 상태에서
만들었기 때문이다 두 번째 행은 이 클래스를 설명하는 독스트링이다.

--__init__() 메서드--
클래스에 속한 함수를 메서드라 부르며 함수에서 배운 것은 모두 메서드에도 적용된다.
지금은 메서드를 호출하는 방법이 다르다는 것 외에는 차이가 없다. 세 번째행의
__init__()메서드는 특별한 메서드이다. 파이써은 Dog 클래스에서 새 인스턴스를
만들 때마다 이 메서드를 자동으로 실행한다. 이 메서드에는 밑줄이 앞뒤로 두 개씩
있는데, 이 표기법은 우리가 만든 메서드 이름과 파이썬의 기본 메서드 이름이
충돌하지 않게 막는 역할이다.

__init__() 메서드는 self와 name, age 세 가지 매개변수를 받도록 정의했다.
self 매개변수는 메서드를 정의할 때 필수이며 반드시 다른 매개변수보다 먼저 써야 한다.
self 매개변수가 반드시 클래스 정의에 포함되야 하는 이유는 파이썬이 나중에 __init__()
메서드를 호출할 때(Dog 인스턴스를 만들기 위해)자동으로 self 매개변수를 전달하기
때문이다. 클래스에 연결된 모든 메서드는 호출할 때 자동으로 인스턴스 자체에 대한
참조인 self를 전달한다. self는 각 인스턴스가 클래스의 속성과 메서드에 접근할 수 있게
한다. Dog의 인스턴스를 만들면 파이썬은  Dog 클래스에서 __init() 메서드를 호출한다.
Dog()에 name과 age 매개변수를 넘겨서 호출할 것이다. self는 자동으로 전달되므로
필요하지 않는다. Dog 클래스에서 인스턴스를 만들 때마다 마지막 두 매개변수인
name과 age의 값만 전달한다.

self.name과 self.age 행에서 정의한 두 변수는 접두사 self가 있다. 접두사 self가
붙은 변수는 클래스의 모든 메서드에서 접근할 수 있으며, 이 클래스에서 만든 모든
인스턴스에서도 접근할 수 있다. self.name = name은 매개변수 name에 저장된 값을 변수
name에 저장한다. 이 변수 name은 생성될 인스턴스에 포함된다. self.age = age 에서도
같은 과정이 반복된다. 이렇게 인스턴스에 접근할 수 있는 변수를 속성(attribute)이라
부른다.

Dog 클래스에서 두번째와 세번째로 정의된 함수 sit()과 roll_over() 메서드가 있다.
이들 메서드에는 이름, 나이 같은 추가 정보가 필요하지 않으므로 self 매개변수
하나만 받도록 정의했다.
나중에 만들 인스턴스도 이들 메서드에 접근할 수 있다. 달리 말하면, 그 개들도 앉거나
구를 수 있다. 지금은 sit()과 roll_over() 메서드가 하는 일은 별로 없다.
단순히 개가 안적나 구른다는 메시지를 출력할 뿐이다. 하지만 개념은 현실적인 상황으로
확장할 수 있다. 이 클래스가 실제 컴퓨터 게임의 일부였다면 이들 메서드에 개가
앉거나 구르는 애니메이션을 만드는 코드를 넣었을 것이다. 이 클래스가 로봇을 조종하는
데 쓰였다면 이들 메서드는 개 로봇이 앉거나 구르게 만들었을 것이다.
"""

# 클래스에서 인스턴스 만들기
"""
쉽게 말해 클래스는 인스턴스를 만드는 설명서이다. 즉, Dog 클래스는 특정한 개(my_dog)인
인스턴스를 어떻게 만드는지 설명하는 설명서이다.
"""
my_dog = Dog('willie', 6)
print("My dog's name is " + my_dog.name.title() + ".")
print("My dog is " + str(my_dog.age) + " years old.")
"""
1행에서 이름이 'willie'인 여섯 살 먹은 개를 만들었다. 파이썬은 이 행을 읽고
매개변수 'willie' 와 6을 넘기며 Dog의 __init__() 메서드를 호출한다.
__init__() 메서드는 이 개를 나타내는 인스턴스를 만들고 name과 age속성값을 우리가
제공한 값으로 정한다. __init__() 메서드에 명시적인 return 문은 없지만, 파이썬은
자동으로 이 개를 나타내는 인스턴스를 반환한다. 이 첫 인스턴스를 my_dog 변수에
저장했다. 명명규칙은 여기서도 도움이 된다. 보통 Dog처럼 첫 글자가 대문자인 이름은
클래스를 나타내고, my_dog같은 소문자 이름은 클래스에서 만든 인스턴스라고 짐작할수
있다.
"""
# 속성에 접근
"""
인스턴스 속성에 접근할 때는 점 표기법을 사용한다. 2번째 행에서 다음과 같이
my_dog의 속성에 접근했다.
my_dog.name
점 표기법은 파이썬에서 자주 쓰인다. 이 문법은 파이선이 속성값을 어떻게 찾는지
보여준다. 여기서 파이썬은 my_dog 인스턴스를 읽고 my_dog와 연결된 name 속성을 찾는다.
이 속성은 Dog 클래스의 self.name과 같은 속성이다. 3행에서는 같은 방법으로 age 속성
에 접근했다. 첫 번째 print 문의 my_dog.name.title()은 my_dog의 name 속성값인
'willie'를 대문자로 시작하는 단어로 바꾼다. 두 번째 print 문의 str(my_dog.age)는
my_dog의 age 속성값인 6을 문자열로 바꾼다.
"""
# 메서드 호출
"""
Dog 클래스에서 인스턴스를 만들면 점 표기법을 써서 Dog에 정의된 메서드를 호출할 수
있다. 우리 애완견이 안고 구르게 만들어보자!
"""
my_dog.sit()
my_dog.roll_over()
"""
메서드를 호출할 때는 인스턴스 이름(여기서는 my_dog)을 쓰고 점을 쓴 다음 호출할
메서드 이름을 쓴다. 파이썬이 my_dog.sit()을 읽으면 Dog 클래스에서 sit() 메서드를
찾아 그 코드를 실행한다. 파이썬은 my_dog.roll_over()도 같은 방법으로 해석한다.
"""
# 인스턴스 여러 개 만들기
your_dog = Dog('lucy', 3)
print("\nYour dog's name is " + your_dog.name.title() + ".")
print("Your dog is " + str(your_dog.age) + " years old.")
your_dog.sit()
